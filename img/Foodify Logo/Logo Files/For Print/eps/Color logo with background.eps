%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 795
%%HiResBoundingBox: 0 0 2371.9199 794.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 794.88 re
W
q
[0.24 0 0 -0.24 0 794.88] cm
q
0 0 9883.333 3310.0725 re
W*
q
[3.125512 0 0 3.126034 0.0593086 0] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
0 0 3162.1111 1060.87268 re
f
Q
q
[70.366936 0 0 70.378693 405.40326 810.82343] cm
/DeviceRGB {} CS
[0.6824 0.6314 0.9176] SC
/DeviceRGB {} cs
[0.6824 0.6314 0.9176] sc
29.5 21 m
26.809 21 l
26.764 20.761 26.709 20.527 26.649 20.294001 c
31.448 17.895 l
31.941999 17.648001 32.140999 17.047001 31.895 16.553001 c
31.647001 16.059002 31.049 15.861001 30.553001 16.106001 c
25.975002 18.394001 l
24.229 14.626 20.42 12 16 12 c
10.618 12 6.135 15.888001 5.191 21 c
2.5 21 l
1.122 21 0 22.121 0 23.5 c
0 23.99 0.18 24.462999 0.505 24.829 c
4 28.761 l
4 29.5 l
4 30.879 5.122 32 6.5 32 c
25.5 32 l
26.879 32 28 30.879 28 29.5 c
28 28.761 l
31.493999 24.828999 l
31.82 24.462999 32 23.99 32 23.5 c
32 22.121 30.879 21 29.5 21 c
h
25.799 21 m
25.237 21 l
25.734999 20.75 l
25.754 20.834 25.781 20.915001 25.799 21 c
h
16 13 m
20.028999 13 23.5 15.4 25.082001 18.841 c
24.191 19.285999 l
22.775 16.171 19.645 14 16 14 c
11.718 14 8.141 16.993 7.23 21 c
6.202 21 l
7.131 16.441 11.171001 13 16 13 c
h
20.576 21 m
19.802999 19.237 18.045 18 16 18 c
13.955 18 12.198 19.237 11.424 21 c
10.35 21 l
11.176001 18.674 13.393001 17 16 17 c
18.465 17 20.587999 18.496 21.507999 20.627001 c
20.764 21 l
20.576 21 l
h
16 20 m
15.117 20 14.33 20.391001 13.78 21 c
12.556 21 l
13.25 19.811001 14.526 19 16 19 c
17.473 19 18.75 19.811001 19.443001 21 c
18.218 21 l
17.67 20.391001 16.882999 20 16 20 c
h
16 16 m
12.835 16 10.158 18.112 9.295 21 c
8.263 21 l
9.155 17.556 12.28 15 16 15 c
19.246 15 22.042999 16.948 23.295 19.734001 c
22.402 20.18 l
21.313999 17.723 18.855 16 16 16 c
h
26 28 m
26 29.5 l
26 29.776001 25.775 30 25.5 30 c
6.5 30 l
6.224 30 6 29.775999 6 29.5 c
6 28 l
2 23.5 l
2 23.224001 2.224 23 2.5 23 c
5 23 l
6 23 l
7 23 l
8 23 l
9 23 l
10 23 l
11 23 l
12 23 l
13 23 l
19 23 l
20 23 l
21 23 l
22 23 l
23 23 l
24 23 l
25 23 l
26 23 l
27 23 l
29.5 23 l
29.775 23 30 23.224001 30 23.5 c
26 28 l
h
f
7.977 11.712 m
7.98 11.718 7.982 11.724 7.985 11.73 c
7.985 11.73 7.986 11.73 7.987 11.73 c
8.07 11.89 8.236 12 8.43 12 c
8.707001 12 8.932 11.774 8.932 11.497 c
8.932 11.454 8.925 11.412 8.914001 11.372 c
8.916 11.365 8.916 11.359 8.914001 11.351999 c
8.539001 10.469999 8.895001 9.501999 9.333 8.459999 c
9.806 7.333999 10.313 6.083999 9.755 4.812999 c
9.684 4.63 9.507 4.5 9.299 4.5 c
9.028 4.5 8.809 4.72 8.809 4.99 c
8.809 5.05 8.821 5.106 8.841 5.159 c
8.841 5.161 8.841 5.163 8.842 5.165 c
8.843 5.168 8.844 5.171 8.845 5.174 c
8.847 5.178 8.848 5.182 8.85 5.186 c
9.254001 6.095 8.863 7.027 8.422 8.079001 c
7.956 9.188 7.44 10.417 7.959 11.67 c
7.965 11.685 7.97 11.698 7.977 11.712 c
h
f
20.153999 11.566 m
20.157999 11.572 20.16 11.578 20.161999 11.584 c
20.164 11.584 l
20.247999 11.744 20.414 11.855 20.607 11.855 c
20.884001 11.855 21.111 11.629 21.111 11.351999 c
21.111 11.308999 21.103001 11.266999 21.093 11.226999 c
21.095001 11.219999 21.095001 11.214 21.091 11.206999 c
20.718 10.324999 21.073 9.356998 21.511 8.314999 c
21.983999 7.188999 22.490999 5.938999 21.933001 4.667998 c
21.861 4.483998 21.685001 4.354998 21.476 4.354998 c
21.205999 4.354998 20.986 4.574998 20.986 4.844998 c
20.986 4.904998 21 4.960999 21.019001 5.013999 c
21.019001 5.015998 21.019001 5.017999 21.019001 5.019999 c
21.021002 5.022998 21.021002 5.025999 21.023001 5.028998 c
21.025002 5.032999 21.027 5.036998 21.027 5.040999 c
21.431 5.949998 21.041 6.881999 20.599001 7.933999 c
20.134001 9.042998 19.619001 10.272999 20.138 11.525999 c
20.143 11.539 20.148001 11.553001 20.153999 11.566 c
h
f
15.019 7.212 m
15.022 7.218 15.024 7.224 15.027 7.23 c
15.027 7.23 15.028001 7.23 15.029 7.23 c
15.113 7.39 15.279 7.501 15.472 7.501 c
15.749001 7.501 15.974 7.275 15.974 6.998 c
15.974 6.955 15.967 6.913 15.956 6.873 c
15.958 6.866 15.958 6.86 15.956 6.853 c
15.581 5.971 15.937 5.003 16.375 3.961 c
16.848 2.835 17.355 1.585 16.797001 0.314 c
16.725 0.13 16.549 0 16.34 0 c
16.07 0 15.85 0.22 15.85 0.49 c
15.85 0.55 15.862001 0.606 15.882 0.659 c
15.882 0.661 15.882 0.663 15.883 0.665 c
15.884001 0.668 15.885 0.671 15.886001 0.674 c
15.887001 0.678 15.889001 0.682 15.89 0.686 c
16.294001 1.595 15.903 2.527 15.462 3.579 c
14.996 4.688 14.48 5.918 15 7.171001 c
15.007 7.185 15.012 7.198 15.019 7.212 c
h
f
Q
q
[98.880836 0 0 98.897369 2834.842 554.64551] cm
/DeviceRGB {} CS
[0.6157 0.149 0.9961] SC
/DeviceRGB {} cs
[0.6157 0.149 0.9961] sc
10.72 5.84 m
10.72 7.64 l
3.74 7.64 l
3.74 12.08 l
10.24 12.08 l
10.24 13.88 l
3.74 13.88 l
3.74 20 l
1.82 20 l
1.82 5.84 l
10.719999 5.84 l
10.72 5.84 l
h
17.42 10.28 m
18.82 10.28 20.006599 10.76338 20.98 11.73 c
21.9534 12.696619 22.446699 13.8734 22.459999 15.259999 c
22.459999 16.66 21.973339 17.833399 21 18.779999 c
20.026661 19.726599 18.833401 20.213299 17.42 20.239998 c
16.0333 20.239998 14.8534 19.759998 13.88 18.799997 c
12.9066 17.839996 12.4067 16.659998 12.38 15.259997 c
12.38 13.886698 12.86334 12.719997 13.83 11.759997 c
14.79666 10.799997 15.9934 10.306698 17.42 10.279997 c
17.42 10.28 l
h
14.3 15.26 m
14.3 16.233341 14.58664 17.0233 15.15998 17.630001 c
15.733319 18.236702 16.486679 18.546661 17.419979 18.560001 c
18.366638 18.560001 19.11998 18.25666 19.679979 17.650002 c
20.239979 17.043343 20.52664 16.246702 20.53998 15.260001 c
20.53998 14.286661 20.259979 13.496701 19.69998 12.890001 c
19.13998 12.283301 18.37328 11.973341 17.399981 11.960001 c
16.453319 11.960001 15.699981 12.273341 15.13998 12.900002 c
14.57998 13.526662 14.29998 14.313301 14.29998 15.260002 c
14.3 15.26 l
h
29.299999 10.28 m
30.699999 10.28 31.886599 10.76338 32.860001 11.73 c
33.833405 12.696619 34.326702 13.8734 34.34 15.259999 c
34.34 16.66 33.85334 17.833399 32.880001 18.779999 c
31.906662 19.726599 30.713402 20.213299 29.300001 20.239998 c
27.913301 20.239998 26.733402 19.759998 25.760002 18.799997 c
24.786602 17.839996 24.286701 16.659998 24.260002 15.259997 c
24.260002 13.886698 24.743341 12.719997 25.710003 11.759997 c
26.676664 10.799997 27.873404 10.306698 29.300003 10.279997 c
29.299999 10.28 l
h
26.18 15.26 m
26.18 16.233341 26.46664 17.0233 27.03998 17.630001 c
27.613319 18.236702 28.36668 18.546661 29.29998 18.560001 c
30.246639 18.560001 30.999981 18.25666 31.55998 17.650002 c
32.11998 17.043343 32.406639 16.246702 32.419979 15.260001 c
32.419979 14.286661 32.13998 13.496701 31.579979 12.890001 c
31.019978 12.283301 30.253279 11.973341 29.27998 11.960001 c
28.333321 11.960001 27.579979 12.273341 27.019979 12.900002 c
26.45998 13.526662 26.179979 14.313301 26.179979 15.260002 c
26.18 15.26 l
h
46.099998 4.88 m
46.099979 20 l
44.29998 20 l
44.29998 18.639999 l
44.259979 18.639999 l
43.913319 19.14666 43.443317 19.539999 42.849979 19.82 c
42.256641 20.1 41.626678 20.24 40.95998 20.24 c
39.533279 20.22666 38.376579 19.753319 37.489979 18.82 c
36.603378 17.886681 36.153278 16.700001 36.13998 15.26 c
36.13998 13.8067 36.583321 12.62 37.469982 11.700001 c
38.356644 10.780002 39.519981 10.306701 40.959984 10.280001 c
41.613323 10.280001 42.239983 10.420001 42.839985 10.700001 c
43.439987 10.980001 43.913284 11.373341 44.259987 11.880001 c
44.299988 11.880001 l
44.299988 4.880001 l
46.099987 4.880001 l
46.099998 4.88 l
h
38.060001 15.26 m
38.060001 16.233341 38.346661 17.0233 38.920002 17.630001 c
39.493343 18.236702 40.2467 18.546661 41.18 18.560001 c
42.126659 18.560001 42.883301 18.25666 43.450001 17.650002 c
44.016701 17.043343 44.299999 16.246702 44.299999 15.260001 c
44.299999 14.286661 44.02 13.496701 43.459999 12.890001 c
42.899998 12.283301 42.133301 11.973341 41.16 11.960001 c
40.226662 11.960001 39.4767 12.266661 38.91 12.880001 c
38.3433 13.493341 38.060001 14.286701 38.060001 15.260001 c
38.060001 15.26 l
h
49.880001 5.8 m
50.240002 5.8 50.550022 5.93002 50.81002 6.19002 c
51.070019 6.45002 51.20002 6.76002 51.20002 7.12002 c
51.20002 7.49336 51.066681 7.8067 50.800018 8.06004 c
50.533356 8.313379 50.2267 8.44004 49.880039 8.44004 c
49.506699 8.44004 49.193359 8.313379 48.940018 8.06004 c
48.686676 7.8067 48.560017 7.49336 48.560017 7.120019 c
48.560017 6.746679 48.693356 6.43334 48.960018 6.179999 c
49.226681 5.926659 49.533337 5.799999 49.879997 5.799999 c
49.880001 5.8 l
h
50.779999 10.520001 m
50.779999 20 l
48.98 20 l
48.98 10.520001 l
50.779999 10.520001 l
h
57.580002 4.64 m
58.113342 4.64 58.559982 4.68666 58.920002 4.78 c
58.720001 6.38 l
58.426662 6.26 58.086662 6.2 57.700001 6.2 c
57.153339 6.2 56.760002 6.35 56.52 6.65 c
56.279999 6.949999 56.16 7.48 56.16 8.24 c
56.16 10.52 l
58.299999 10.52 l
58.299999 12.08 l
56.139999 12.08 l
56.139999 20 l
54.34 20 l
54.34 12.08 l
52.299999 12.08 l
52.299999 10.520001 l
54.34 10.520001 l
54.34 8.320001 l
54.34 7.053301 54.596661 6.123401 55.110001 5.530001 c
55.623341 4.936601 56.446701 4.640001 57.580002 4.640001 c
57.580002 4.64 l
h
61.240002 10.520001 m
64.060005 17.92 l
64.100006 17.92 l
66.780006 10.520001 l
68.720009 10.520001 l
64.240005 22 l
63.826664 23.106701 63.373325 23.85 62.880005 24.23 c
62.386684 24.609999 61.753304 24.799999 60.980003 24.799999 c
60.326664 24.799999 59.793304 24.713339 59.380005 24.539999 c
59.600006 22.919998 l
59.973347 23.053339 60.333347 23.119999 60.680008 23.119999 c
61.240009 23.119999 61.643349 22.983339 61.890007 22.709999 c
62.136665 22.436659 62.353329 22.046659 62.539986 21.539999 c
63.099987 20.059999 l
59.159988 10.52 l
61.23999 10.52 l
61.240002 10.520001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
